'use strict';

/**
 * Module Dependencies
 */

// Modules needed for Express 4.x
var logger          = require('morgan');             // https://github.com/expressjs/morgan
var express         = require('express');            // https://npmjs.org/package/express
var session         = require('express-session');    // https://github.com/expressjs/session
var bodyParser      = require('body-parser');        // https://github.com/expressjs/body-parser
var cookieParser    = require('cookie-parser');      // https://github.com/expressjs/cookie-parser
var errorHandler    = require('errorhandler');       // https://github.com/expressjs/errorhandler

// Other Modules
var path            = require('path');               // http://nodejs.org/docs/v0.10.25/api/path.html
var utils           = require('./utils');
var flash           = require('express-flash');
var base32          = require('thirty-two');

// Passport Modules
var passport        = require('passport');
var TotpStrategy    = require('passport-totp').Strategy;
var LocalStrategy   = require('passport-local').Strategy;


/**
 * Users "Database" ;)
 */

var users = [
  { id: 1, username: 'bob', password: 'secret', email: 'bob@example.com', twofactor: false },
  { id: 2, username: 'joe', password: 'birthday', email: 'joe@example.com', twofactor: false }
];

var nextId = 3;

function findById (id, fn) {
  var idx = id - 1;
  if (users[idx]) {
    fn(null, users[idx]);
  } else {
    fn(new Error('User ' + id + ' does not exist'));
  }
};

function findByUsername (username, fn) {
  for (var i = 0, len = users.length; i < len; i++) {
    var user = users[i];
    if (user.username === username) {
      return fn(null, user);
    }
  }
  return fn(null, null);
};

/**
 * User Keys "Table" ;)
 */

var keys = {};

function findKeyForUserId (id, fn) {
  return fn(null, keys[id]);
};

function saveKeyForUserId (id, key, fn) {
  keys[id] = key;
  return fn(null);
};


/**
 * Validate proper authentication
 */

function isAuthenticated (req, res, next) {
  // Is the user authenticated?
  if (req.isAuthenticated()) {
    // Does the user have enhanced security enabled?
    if ( req.user.twofactor ) {
      if (req.session.passport.secondFactor === 'totp') {
        // If we already have validated the second factor it's
        // a noop, otherwise redirect to capture the OTP.
        return next();
      } else {
        res.redirect('/verify-otp');
      }
    } else {
      // If enhanced security is disabled just continue.
      return next();
    }
  } else {
    res.set('X-Auth-Required', 'true');
    req.flash('errors', { msg: 'You must be logged in to reach that page.' });
    res.redirect('/login');
  }
};

/**
 * Passport Setup
 */

// Passport session setup.
//   To support persistent login sessions, Passport needs to be able to
//   serialize users into and deserialize users out of the session.  Typically,
//   this will be as simple as storing the user ID when serializing, and finding
//   the user by ID when deserializing.

passport.serializeUser(function (user, done) {
  done(null, user.id);
});

passport.deserializeUser(function (id, done) {
  findById(id, function (err, user) {
    done(err, user);
  });
});


// Use the LocalStrategy within Passport.
//   Strategies in passport require a `verify` function, which accept
//   credentials (in this case, a username and password), and invoke a callback
//   with a user object.  In the real world, this would query a database;
//   however, in this example we are using a baked-in set of users.
passport.use(new LocalStrategy(function(username, password, done) {
    process.nextTick(function () {
      // Find the user by username.  If there is no user with the given
      // username, or the password is not correct, set the user to `false` to
      // indicate failure and set a flash message.  Otherwise, return the
      // authenticated `user`.
      findByUsername(username, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false);
        }
        if (user.password != password) {
          return done(null, false);
        }
        return done(null, user);
      })
    });
  }));

// The TOTP authentication strategy authenticates a user using a TOTP value
// generated by a hardware device or software application (known as a token).
// The strategy requires a setup callback. The setup callback accepts a previously
// authenticated user and calls done providing a key and period used to verify
// the HOTP value. Authentication fails if the value is not verified.

passport.use(new TotpStrategy(
  function (user, done) {
    // setup function, supply key and period to done callback
    findKeyForUserId(user.id, function (err, obj) {
      if (err) {
        return done(err);
      }
      return done(null, obj.key, obj.period);
    });
  }
));

/**
 * Express Setup
 */

var app = express();

// Settings for development
if (app.get('env') === 'development') {
  // Don't minify html in dev, use debug intrumentation
  app.locals.pretty = true;
  app.locals.compileDebug = true;
}

app.use(logger('dev'));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser());
app.use(cookieParser('keyboard cat'));
app.use(session({ secret: 'keyboard cat' }));
app.use(flash());
app.use(passport.initialize());
app.use(passport.session());

/**
 * Routes
 */

/**
 * GET Landing page
 */

app.get('/', function (req, res){
  if (req.user) {
    return res.redirect('/home');
  } else {
    res.render('landing/landing');
  }
});

/**
 * GET Login
 */

app.get('/login', function (req, res) {
  if (req.user) {
    req.flash('info', { msg: 'You are already logged in!' });
    return res.redirect('/home');
  }
  res.render('account/login');
});

/**
 * POST Login
 *   Use passport.authenticate() as route middleware to authenticate the
 *   request.  If authentication fails, the user will be redirected back to the
 *   login page.  Otherwise, the primary route function function will be called.
 *
 *   $curl -v -d "username=bob&password=secret" http://127.0.0.1:3000/login
 */

app.post('/login',
  passport.authenticate('local', { failureRedirect: '/login', failureFlash: true }),
  function (req, res) {
    res.redirect('/home');
});

/**
 * GET Logout (requires authentication)
 */

app.get('/logout', isAuthenticated, function (req, res) {
  // Augment Logout to handle second factor
  delete req.session.passport.secondFactor;
  req.logout();
  res.redirect('/');
});

/**
 * GET Signup Page
 */

app.get('/signup', function (req, res) {
  res.render('account/signup');
});

/**
 * POST Signup Page
 */

app.post('/signup', function (req, res) {

  // Create new user record
  var newuser = {};
  newuser.id        = nextId;
  newuser.username  = req.body.username;
  newuser.password  = req.body.password;
  newuser.email     = req.body.email;
  newuser.twofactor = false;

  // Save new user
  users.push(newuser);
  nextId++;

  // Log them in
  req.login(newuser, function (err) {
    if (err) {
      return next(err);
    }
    req.flash('info', { msg: 'We recommend turning on enhanced security in your account profile.' });
    return res.redirect('/home');
  });

});

/**
 * GET Home (requires authentication)
 */

app.get('/home', isAuthenticated, function (req, res){
  res.render('home/home', {
    user: req.user
  });
});

/**
 * GET Account (requires authentication)
 */

app.get('/account', isAuthenticated, function (req, res){
  res.render('account/profile', {
    user: req.user
  });
});

/* -----------------------------------------------

            Enhanced Security Routes

----------------------------------------------- */

/**
 * GET /setup-otp (requires authentication)
 */

app.get('/setup-otp', isAuthenticated, function (req, res, next){

  // Prevent someone from seeing your QR code if
  // enhanced security is *already* enabled.
  if (req.user.twofactor) {
    req.flash('info', { msg: 'You already enabled enhanced security.' });
    return res.redirect('back');
  }

  // Generate a secret key
  var key = utils.randomKey(10);
  var encodedKey = base32.encode(key);

  // Generate QR code
  // Reference: https://code.google.com/p/google-authenticator/wiki/KeyUriFormat
  var otpUrl = 'otpauth://totp/' + 'Example:%20' + req.user.email + '?issuer=Example&secret=' + encodedKey + '&period=30';
  var qrImage = 'https://chart.googleapis.com/chart?chs=166x166&chld=L|0&cht=qr&chl=' + encodeURIComponent(otpUrl);

  // Save the key for the user
  saveKeyForUserId(req.user.id, { key: key, period: 30 }, function (err) {
    if (err) {
      return next(err);
    }
    res.render('account/setup-otp', {
      user: req.user,
      key: encodedKey,
      qrImage: qrImage
    });
  });

});

/**
 * GET /verify-otp-first (requires authentication)
 *
 *   Ensure that OTP works for user
 *   BEFORE we turn on enhanced security!
 */

app.get('/verify-otp-first', isAuthenticated, function (req, res) {
  res.render('account/verify-otp-first', {
    user: req.user
  });
});

/**
 * POST /verify-otp-first (requires authentication)
 *
 *   If the code is verified then turn on enhanced security
 */

app.post('/verify-otp-first', isAuthenticated, function (req, res, next) {
  passport.authenticate('totp', function (err, user, info) {
    if (err) {
      req.flash('errors', { msg: err.message });
      return res.redirect('back');
    } else {
      // Log user in
      req.logIn(user, function(err) {
        if (err) {
          req.flash('errors', { msg: 'That code did not work.' });
          return res.redirect('back');
        } else {      // It's all good - let's turn it on!
          // Set twofactor to "true" for user
          for (var i = 0, l = users.length; i < l; i++) {
            if (users[i].id === req.user.id) {
              users[i].twofactor = true;
              break;
            }
          }
          // Save the fact that we have authenticated via two factor
          req.session.passport.secondFactor = 'totp';
          // Complete enhanced security setup
          res.redirect('/complete-otp');
        }
      });
    }
  })(req, res, next);
});

/**
 * GET /complete-otp (requires authentication)
 *
 *   Complete OTP setup with the user
 */

app.get('/complete-otp', isAuthenticated, function (req, res) {
  res.render('account/complete-otp', {
    user: req.user
  });
});

/**
 * GET /verify-otp
 */

app.get('/verify-otp', function (req, res) {
  res.render('account/verify-otp', {
    user: req.user
  });
});

/**
 * POST /verify-otp
 *
 *   Verify OTP Password
 */

app.post('/verify-otp', function (req, res, next) {
  passport.authenticate('totp', function (err, user, info) {
    if (err) {
      req.flash('errors', { msg: err.message });
      return res.redirect('back');
    } else {
      // Log user in
      req.logIn(user, function(err) {
        if (err) {
          req.flash('errors', { msg: 'That code did not work.' });
          return res.redirect('back');
        } else {
          // Save the fact that we have authenticated via two factor
          req.session.passport.secondFactor = 'totp';
          // Send user on their merry way
          if (req.session.attemptedURL) {
            var redirectURL = req.session.attemptedURL;
            delete req.session.attemptedURL;
            res.redirect(redirectURL);
          } else {
            res.redirect('/home');
          }
        }
      });
    }
  })(req, res, next);
});

/**
 * POST /account/disable-otp (requires authentication)
 *   Turns *off* two factor enhanced security
 */

app.get('/account/disable-otp', isAuthenticated, function (req, res){
    // Set twofactor to "false" for user
    for (var i = 0, l = users.length; i < l; i++) {
      if (users[i].id === req.user.id) {
        users[i].twofactor = false;
        break;
      }
    }
    // Delete their OTP key
    delete keys[req.user.id];
    // Then redirect back to account
    res.redirect('/account');
});

/* -----------------------------------------------

              Utility Routes

----------------------------------------------- */

/**
 * GET Users
 */

app.get('/users', function (req, res){
  res.send('Users: ' + JSON.stringify(users));
});

app.get('/users/:user', function (req, res){
  res.send('User: ' + JSON.stringify(users[req.params.user-1]));
});

/**
 * GET Keys
 */

app.get('/keys', function (req, res){
  res.send('Keys: ' + JSON.stringify(keys));
});

/**
 * End of Routes
 */

// Final error catch-all just in case...
if ( app.get('env') === 'development') {
  app.use(errorHandler({ dumpExceptions: true, showStack: true }));
}

/**
 * Fire up Express
 */

app.listen(3000, function() {
  console.log('Express server listening on port 3000');
});
